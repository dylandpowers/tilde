/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Mutation: {};
  Query: {};
  ReadingActivity: { // root type
    book: string; // String!
    date: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    minutes: number; // Int!
  }
  Todo: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    isCompleted: boolean; // Boolean!
    text: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Weather: { // root type
    degrees: string; // String!
    iconUrl: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    addReadingActivity: NexusGenRootTypes['ReadingActivity']; // ReadingActivity!
    addTodo: NexusGenRootTypes['Todo']; // Todo!
    completeTodo: NexusGenRootTypes['Todo']; // Todo!
  }
  Query: { // field return type
    activities: Array<NexusGenRootTypes['ReadingActivity'] | null> | null; // [ReadingActivity]
    completedTodos: Array<NexusGenRootTypes['Todo'] | null>; // [Todo]!
    hooray: string; // String!
    todos: Array<NexusGenRootTypes['Todo'] | null> | null; // [Todo]
    token: string; // String!
    weather: NexusGenRootTypes['Weather']; // Weather!
  }
  ReadingActivity: { // field return type
    book: string; // String!
    date: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    minutes: number; // Int!
  }
  Todo: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    isCompleted: boolean; // Boolean!
    text: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Weather: { // field return type
    degrees: string; // String!
    iconUrl: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    addReadingActivity: 'ReadingActivity'
    addTodo: 'Todo'
    completeTodo: 'Todo'
  }
  Query: { // field return type name
    activities: 'ReadingActivity'
    completedTodos: 'Todo'
    hooray: 'String'
    todos: 'Todo'
    token: 'String'
    weather: 'Weather'
  }
  ReadingActivity: { // field return type name
    book: 'String'
    date: 'DateTime'
    id: 'ID'
    minutes: 'Int'
  }
  Todo: { // field return type name
    createdAt: 'DateTime'
    id: 'ID'
    isCompleted: 'Boolean'
    text: 'String'
    updatedAt: 'DateTime'
  }
  Weather: { // field return type name
    degrees: 'String'
    iconUrl: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addReadingActivity: { // args
      book: string; // String!
      minutes: number; // Int!
    }
    addTodo: { // args
      text: string; // String!
    }
    completeTodo: { // args
      id: string; // ID!
    }
  }
  Query: {
    activities: { // args
      month?: number | null; // Int
    }
    todos: { // args
      ids?: Array<string | null> | null; // [String]
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}